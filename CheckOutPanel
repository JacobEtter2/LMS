/* This class is the screen where a user would check out a book. It allows the to choose the
   book they want and enter their name.
 */

import javax.swing.*;
import java.awt.event.*;
import java.util.*;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;


public class CheckOutPanel extends JPanel implements ActionListener {
    private Frame frame;
    JButton backButton = new JButton("Back");
    JButton checkOutButton = new JButton("Check out");
    JLabel dropdownLabel = new JLabel("Book:");
    JComboBox bookDropdown = new JComboBox();
    JLabel nameLabel = new JLabel("Your name:");
    JTextField nameBox = new JTextField();
    //Clears all books from comboBox, traverses Book.bookList and only adds books that are checked-in
    public void updateDropdown(){
        bookDropdown.removeAllItems();
        ArrayList<Book> checkedOutBooks = new ArrayList<>();
        for (Book book : Book.bookList){
            if (book.checkedInStatus.equals("Checked In")) {
                checkedOutBooks.add(book);
            }
            Collections.sort(checkedOutBooks, new Comparator<Book>() {
                @Override
                public int compare(Book o1, Book o2) {
                    return o1.title.compareTo(o2.title);
                }
            });

        }
        for(Book book:checkedOutBooks){
            bookDropdown.addItem(book.title);
        }
    }
    //Shows appropriate damage message for book that is being checked out
    //Finalizes check out if damage allows
    //updates book dropdown and JSON
    private void checkOutBook(Object item){
        for (Book book : Book.bookList){
            if (book.title.equals(item)){
                if(book.damagedStatus.equals("Cannot be checked out")){
                    JOptionPane.showMessageDialog(this,"This book is too damaged to be checked out :(");
                }
                else if(book.damagedStatus.equals("Major Damage")){

                    int option = JOptionPane.showConfirmDialog(null, "This book has sustained major damage, would you still like to check out   ?", "Confirmation", JOptionPane.YES_NO_CANCEL_OPTION);

                    if (option == JOptionPane.YES_OPTION) {
                        finalizeCheckOut(book);
                    }
                }
                else{
                    JOptionPane.showMessageDialog(this,book.title + " has been checked out.");
                    finalizeCheckOut(book);
                }



            }
        }
        updateDropdown();
        FileUpdater.updateFile();
    }

    //Changes book.checkedInStatus
    //Sets book.studentName
    //Clears name input
    //Sets book's return date to 14 days after current date
    private void finalizeCheckOut(Book book){
        book.checkedInStatus = "Checked Out";
        book.studentName = nameBox.getText();
        nameBox.setText("");
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MM-dd-yyyy");
        book.returnDate = formatter.format(LocalDate.now().plusDays(14));

    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if(e.getSource().equals(backButton)){
            frame.showScreen(frame.homeScreenPanel);
        }
        else if(e.getSource().equals(checkOutButton)){
            if(!nameBox.getText().equals("")) {
                checkOutBook(bookDropdown.getSelectedItem());
            }
        }
    }
    private void configureComponents(JPanel panel) {
        backButton.setBounds(24,24,96,72);
        backButton.addActionListener(this);

        dropdownLabel.setBounds(96,108,36,24);
        bookDropdown.setBounds(140,108,448,24);

        checkOutButton.setBounds(240,200,108,72);
        checkOutButton.addActionListener(this);

        nameLabel.setBounds(62,160,100,24);
        nameBox.setBounds(140,160,144,24);



        panel.add(backButton);
        panel.add(dropdownLabel);
        panel.add(bookDropdown);
        panel.add(checkOutButton);
        panel.add(nameLabel);
        panel.add(nameBox);
    }
    public CheckOutPanel(Frame frame){
        this.setVisible(false);
        this.setBounds(0,0,600,600);
        this.setLayout(null);
        this.frame = frame;
        this.configureComponents(this);
    }


}
